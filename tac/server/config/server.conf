###########################################################
# TAC SCM Server configuration
###########################################################

# The password for the admin user.  If a password is specified here,
# any existing password for the admin user will be replaced with this
# password.
admin.password=secret_password

# Set to false to disable the administration web pages (default true)
admin.pages=true

# The server host name (localhost is used if not specified)
server.name=

# The default simulation type when new simulations are created.
# This type of simulation must be supported by the server.
# There should also be two other files in this config
# directory that start with the name below, one which ends in
# _sim.conf, and one that ends in _viewer.conf. See examples.
simulation.defaultType=tac06scm

# To facilitate experimntation, the following two properties have been
# added. You can now control the simulationID of the next game to run,
# and even specify the total number of games to run. These options should
# not be used in tournaments or other official game-running situations.
#
# Specify the starting value of the simulation id:
#sim.startsimid=123 

# Specify the maximum number of games allowed to run on this server:
#sim.gamestorun=2 

############################################################
# Simulation configuration
############################################################

# Set the start delay when creating games in seconds.
# Zero means start as soon as possible.
sim.startDelay=60

# When running multiple server instances on the same physical machine,
# such as when running a multi-core machine with a number of virtual hosts, 
# we want to avoid having all severs start the game day at exactly the same 
# time. Set this number to be slightly offset from the other server 
# instances running on the same network interface. Keep in mind that values 
# larger than 15 wouldn't really make much sense, as each day is only 15 
# seconds long. For example, if you have four servers on the same hardware, 
# it might be good to use values of 0, 4, 8, 12.
sim.gameStartOffset=0

# Immediately create a new empty simulation when started.
# Only for testing the dummy agents and requires empty
# simulations to be allowed (see below). ONLY FOR TESTING!
sim.createSimulation=false

# Allow empty simulations i.e. let simulations with only dummies run
sim.allowEmptySimulations=false

# Allow unregistered agents to connect to the server, just as
# if they had already registered. This is only useful for 
# experimentation, and should be turned off normally and for
# competitions. It simply calls the original addUser function
# that would normally be called when an agent is registered
# from the web interface.
sim.allowUnregisteredAgents=true

# Show builtin viewer GUI
sim.gui=false

# Simulation managers
sim.manager.names=TAC06
sim.manager.TAC06.class=se.sics.tasim.tacscm.sim.TACSCMManager

sim.log.directory=logs
sim.log.simlogs=logs/logs
sim.log.sims=logs/sims

# Run this program after a simulation is complete
#   %s is substituted with the server name
#   %g is substituted with simulation id
# sim.runAfterSimulation=gzip logs/logs/%s_SIM_%g.log logs/sims/%s_sim%g.slg

# Gateways
sim.gateway.names=tact

# The gateway for agent connections
sim.gateway.tact.class=se.sics.tasim.sim.server.TACTGateway
# The port to listen for agent connections
sim.gateway.tact.port=6502

# Connection to information system
sim.ic.class=se.sics.tasim.is.common.BuiltinInfoConnection


############################################################
# Information system configuration
############################################################

is.http.accesslog=logs/access-yyyy_mm_dd.log
# this is the port where the web interface is
is.http.port=8080
is.manager.names=TAC06
is.manager.TAC06.class=se.sics.tasim.tacscm.is.TACSCMInfoManager
is.resultDirectory=public_html

# This is the port that viewers connect on
is.viewer.port=4042



############################################################
# General Database Information
############################################################
# For storing user and game information, the TAC SCM server
# has had tradtitionally two options:
# A) File-based database
# B) SQL database using JDBC
#
# The file based database was a custom-built scheme based on
# Java's object serialization, and resuled in binary files 
# that were not easily readable outside the server. This
# scheme is being removed in favor of using SQLite as a
# single-file database, which has all the advantages of not
# requiring a network connection or setup of a server, with
# none of the unreadable-file problems, as SQLite is a open
# file format with interfaces for nearly every language.

# The TAC SCM server uses the standard Java JDBC database
# interface. In theory, any database that uses JDBC can be
# used with the TAC SCM server. In reality, there are a few
# small differences in SQL syntax between drivers and 
# databases. There are two methods that have been tested
# and are known to work:
#
# 1) MySQL, using the official MySQL Connector/J.
#    Visit: http://www.mysql.com/products/connector/j/
#    You will have to modify the build script to include the
#    JAR file you downloaded from the given website
#
# 2) SQLite, using the modified SQLITE JDBC driver.
#    Homepage: http://www.zentus.com/sqlitejdbc/
#    SQLite is very nice for testing, as it is a single-
#    file database, and is very fast.
#    We have modified this package to provide another 
#    interface method, and have included the modified
#    driver.
#
# See below for usage examples.

############################################################
# Information on User / Server Databases
############################################################
# There must always be a valid server database, which will
# store the user information if no user database is 
# specified. If a user database is also provided, the server
# will use the user database to store the usernames and 
# passwords, and use the server database to store everything
# else.
#
# If you want to run a competition using multiple servers,
# and then merge the scores, you need to define a user
# database, even if it is the same as the server daatabase.
# This is because the score merging utilities only look at
# the user database information.
#
# If you specify a user database, you must still specify the
# user database driver, it will not simply inherit the
# database driver settings from the server database.


############################################################
# User database - If specified, used to store login info.
############################################################
# To use a user database, you need to uncomment the database
# and database.driver lines below, as well as the four lines
# belonging to either option 1 or 2 below.

# 1) MySQL: This is the name of the database to connect to.
# 2) SQLite: This is not used, as the file is the database.
#is.user.database=scmdatabase

# In the old days, this item is how you would select whether
# to use the (now obsolete) file-based database or the SQL
# database. You probably want to leave this as is.
#is.user.database.driver=se.sics.isl.db.sql.SQLDatabase

# 1) MySQL
#is.user.database.sql.driver=org.gjt.mm.mysql.Driver
#is.user.database.sql.url=jdbc:mysql://localhost:3306/mysql
#is.user.database.sql.user=
#is.user.database.sql.password=

# 2) SQLite - In the URL line, 'scmdatabase' is the db filename.
#    You can leave the user and password fields empty.
#is.user.database.sql.driver=org.sqlite.JDBC
#is.user.database.sql.url=jdbc:sqlite:scmdatabase
#is.user.database.sql.user=
#is.user.database.sql.password=

############################################################
# Server database - Stores login info if no user-db is used.
############################################################
# To set up the database, you need to set the name of the
# database, and decide if you want results stored in the db.
# You also need to pick one of the two options below, either
# 1-MySql or 2-SQLite

# 1) MySQL: This is the name of the database to connect to.
# 2) SQLite: This is not used, as the file is the database.
is.database=scmdatabase

# Set this to true if we want to store the game results in
# the database. 
is.database.results=true

# In the old days, this item is how you would select whether
# to use the (now obsolete) file-based database or the SQL
# database. You probably want to leave this as is.
is.database.driver=se.sics.isl.db.sql.SQLDatabase

# 1) MySQL
#is.database.sql.driver=org.gjt.mm.mysql.Driver
#is.database.sql.url=jdbc:mysql://dbserver:3300/
#is.database.sql.user=myUsername
#is.database.sql.password=myPassword

# 2) SQLite - In the URL line, 'scmdatabase' is the filename.
#    You can leave the user and password fields empty.
#    The db filename must be alphanumeric only.
is.database.sql.driver=org.sqlite.JDBC
is.database.sql.url=jdbc:sqlite:scmdatabase
is.database.sql.user=
is.database.sql.password=

############################################################
# Common configuration
############################################################

# Show the administration status GUI (displays thread status, etc)
admin.gui=false

# Log level: 0 => log everything, 6 => log minimum
log.consoleLevel=3
log.fileLevel=0
# log.threads=true

# Current time zone for the server
timeZone=0
